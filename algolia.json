
[
  
  
  {
    "objectID": "1746506017",
    "permalink": "/post/install-free-adobe/",
    "title": "Adobe全家桶免费安装教程",
    
    "content": " 文章目录 Adobe 简介 安装教程 下载安装包与工具 安装与解压 安装完成 Adobe 简介 ​ Adobe公司创建于1982年，是世界领先的数字媒体和在线营销解决方案供应商。公司总部位于美国加利福尼亚州圣何塞。Adobe 的客户包括世界各地的企业、知识工作者、创意人士和设计者、OEM合作伙伴，以及开发人员。 公司在数码成像、设计和文档技术方面的创新成果，在这些领域树立了杰出的典范，使数以百万计的人们体会到视觉信息交流的强大魅力。更详细的资料可以了解这边 传送门\n安装教程 下载安装包与工具 Adobe Creative Cloud官网下载地址：[传送门]（https://www.adobe.com/creativecloud/desktop-app.html）\nAdobe Creative Cloud中文官网下载地址：[传送门]（https://www.adobe.com/cn/creativecloud/roc/business.html）\n工具下载地址：Adobe工具包\n安装 ①.安装Adobe Creative Cloud（双击安装，语言选择不了中文，可以先英文，安装后默认中文或者到首选项修改，此步骤必须安装否则破解失败）\n②.注册Adobe账号（有则登录，此步骤省略）\n③.更改Adobe Creative Cloud下载Adobe软件安装地址\n（如果不改默认安装在c盘，本次测试软件ps高达9g，切记修改）\n④.在所有应用程序-可尝试的应用程序中选择自己要下载的软件，点击试用安装\n⑤.使用AdobeGenP工具（选择的安装目录就是刚刚设置的总体目录下的软件目录，以ps为例，D:\\Adobe\\Adobe Photoshop 2024，这里填自己的安装路径，图片仅供参考）\n",
    
    "date": "2025-05-06 12:33:37",
    "updated": "2025-05-06 12:33:37"
  }
  
  , 
  {
    "objectID": "1745420917",
    "permalink": "/post/tutorial-not-so-intelligent-smart/",
    "title": "一个不那么智能的智能点名系统的教程",
    
    "content": " Hello，这里是一个不那么智能的智能点名系统的教程。 快速进入工具 快速叠甲，本工具的各种数据处理皆为本地处理，请放心使用\n如你所见，这是一个基于HTML制作的一个静态网页\n第一步，肯定是创建一个总体名单。\n我来给个例子\n首先创建一个新的TXT格式的文件，并改名为“总体人员名单”（主要还是方便记忆，这个看自己）\n然后打开它，把总体人员的名字输入进去\n（ps：按照自己的习惯或者啥的输入就好，本网页工具有自动排序同时保持原本顺序的功能，所以不用专门手动列成一列（省事，好耶！！））\n最后就是将总体人员的文件拖入到总名单的位置（手机则是要在对应的文件夹创建txt文件，然后找到TXT文件并上传）\n最后点击加载名单，就可以自动显示总体名单了\nps：如果有请假的名单，也可以拖入请假名单的位置，然后也会自动显示\n如果需要导出记录，直接点击保存出勤记录，则会自动下载好带有时间的出勤记录的TXT文件，直接打开就会有对应请假，旷课等的人数和名字了\n",
    
    "date": "2025-04-23 23:08:37",
    "updated": "2025-04-23 23:08:37"
  }
  
  , 
  {
    "objectID": "1738675952",
    "permalink": "/post/pve-install-ubuntu/",
    "title": "使用PVE安装Ubuntu系统",
    
    "content": " 一、准备工作 Proxmox VE(PVE)环境 Linux镜像 首先我们需要准备好一台安装好PVE的机器以及Linux镜像，我这里使用的是PVE8.3.0以及Ubuntu Server 24.04.1 LTS ，大家可以自行前往官网或者各大镜像站下载自己想要的版本。\n接着将下载好的Ubuntu镜像上传至PVE，可以将镜像名称修改为简短一点的，我这里就不修改了：\n二、创建虚拟机 点击右上角“创建虚拟机”按钮，并勾选弹出框底部的“高级”勾选框，系统会自动分配一个VM ID，可以根据自己的需求修改。给这个虚拟机命名，并根据需要选择是否开机自启，点击“下一步” 点击下一步，选择“使用CD/DVD光盘镜像文件(ISO)”，存储选择local并选择刚才上传的ISO镜像，其他保持默认即可，点击“下一步” 系统设置保持默认即可，点击“下一步” 磁盘设置保持默认即可，大小可以根据自己的情况修改，我这里大小分配20G，点击“下一步” CPU设置根据物理机使用的CPU情况设置，如果系统做简单使用可以分配1插槽2核心，我这里分配1插槽4核心，点击“下一步” 内存同样根据实际硬件情况和需求修改，点击“下一步” 网络保持默认即可，点击“下一步” 检查好所有配置是否正确，点击“完成” 三、系统安装 语言选择English\n选择继续且不更新\n键盘保持默认的英文布局\n系统类型保持默认，如果希望安装精简版可以选择下方的“minized”版本\n网络没有特别需求则保持默认，会自动分配ip\n如果需要配置代理服务器则填写相关信息，没有特殊要求则保持为空\n由于国内网络原因，需要更换一下镜像源以保证软件能够快速更新下载，我这里使用的是中科大镜像源\n存储配置保持默认即可，如果理解各个分区的作用可以自定义\n上一个如果你都默认了，这一步也默认啦\n全部信息确认完毕后进行安装，选择“Continue”即可\n对个人档案进行配置，设置自己的昵称、服务器名、用户名、用户密码，全部配置完毕后选择“Done”\n接着会有一个选择是否安装\u0026rsquo;PRO\u0026rsquo;版本的，选择第二个\n接着我们选择安装OpenSSH以保证能够远程安全地连接服务器\n这一步选择需要安装的工具包，我就不选额外的工具包了，这一步完成后就会进行安装程序\n安装完毕后，下方会出现“取消更新并重启”的提示，选择该命令并等待重启，如果等待几分钟发现一直卡在重启界面就在PVE控制台直接强制关机再开机\n等待跑完各种命令后，就可以登录了，到此为止，整个安装的流程就结束了。\n",
    
    "date": "2025-02-04 21:32:32",
    "updated": "2025-02-04 21:32:32"
  }
  
  , 
  {
    "objectID": "1737353750",
    "permalink": "/post/basics-of-introductory-photography_/",
    "title": "关于入门摄影的基础知识",
    
    "content": " 基础参数知识 1.快门 快门速度越快，进光量越少\n但是越容易清晰的拍摄到运动的物体\n抓拍行人(快门速度要比1/125s更快) 抓拍鸟类(快门速度要比1/1600s更快) 抓拍飞机(快门速度要比1/2000s更快) 高铁上拍风景(快门速度要比1/1600s更快) 快门速度很快我们称为“高速快门”\n相反快门速度越慢，进光量越多越难清晰的拍摄到运动的物体\n快门速度慢的一两秒时甚至能拍摄物体运动轨迹\n快门速度慢我们称为“慢速快门”\n慢速快门很适合拍溪流，烟花，瀑布，以及车流!\n慢速快门配合“甩拍”能拍出背景前景模糊但主体清晰的效果!\n原理就是我们拍摄的方向速度和人的运动是一致的，人对相机来说是相对静止的，所以人拍出来效果是清晰的，由于背景或者前景不动，不是相对静止所以就模糊了。\n拍视频的话快门速度不能随便乱调\n拍视频的快门速度一般是设置为帧速率的两倍分之一，比如你是用的帧速率是25帧，那快门速度就得设置为1/50s,如果你的帧速率是50帧，那快门速度就得设置为1/100s,如果你的帧速率是60帧，那快门速度就得设置为1/120s,因为相机没有1/120s,所以你就得设置为1/125s。\n当然你也可以慢速快门(1/8s)能模拟出王家卫的拍摄风格(慢门抽帧)\n安全快门=1/焦距一般情况下，拍照的快门速度要高于安全快门\n这样拍出来的照片会更清晰\n例如你使用的50焦段镜头安全快门就是1/50\nPs:但是拍照时快门速度最好是比1/50s更快\n参考\n人物: 1/125-1/250s 宠物: 1/500s 宝宝: 1/400s 车辆: 1/1000s 2.感光度 数值越高，画面越亮，噪点越少 ; 数值越低，画面越暗，噪点越少\n不过有些相机有双原生ISO\n例如:我的相机双原生ISO是400和3200\n如果拍摄时需要提高ISO到1000以上的话，这时候噪点会很多，这时候使用第二档iSO效果会更好。\n夜景拍摄推荐使用第二档ISO!\n不同相机它的双原生iso不同!\n学会曝光三要素不仅是为了曝光正常!\n而是对其中一两项参数有要求\n案例1 ​\t例如旅游拍照时人很多\n​\t如果你想把背景或者前景其他人虚化掉所以你觉得开大光圈ISO调为最低100(保证画质最好)\n​\t这时候根据曝光情况调整快门速度记得\n案例2 ​\t再比如说旅游想拍出人物和标志性建筑(风景)都清晰，那这时候你得用小光圈拍摄，大概调为(f8-f11),这时候把iSO调最低100，然后根据情况调整快门速度，\t但是记得快门速度不能低于安全快门\n​\t例如你用的是50mm镜头，那你快门速度就调为1/50s,这时候曝光不足就得把iSO提高!\n案例3 ​\t再比如旅游想抓拍鸟类或者马奔跑等等，这时候快门速度就得优先考虑，所以你得先把快门速度调为1/1600s(或者更快)，然后这时候看你想要景深大还是景\t深小，如果想要拍出虚化效果那就把光圈调大，这时候根据曝光情况调整ISO即可!\n参考\n晴天、日常: ISO100 阴天、室内: ISO400 傍晚、黄昏: IS0800-1600 星空、银河: IS03200-6400 3.光圈 f值越小，光圈开的越大，进光量越多，景深越小4(清晰范围越小，也就是拍人像虚化效果好，很适合在背景或者前景杂乱时使用),光圈开的越大，越容易有暗角和紫边，这个因镜头而异。 f值越大，光圈开的越小，进光量越少，景深越大(清晰范围越大，也就是拍人像虚化效果不好，很适合拍全家福，风景照等等),光圈开的越小，画质相对越好，暗角和紫边效果越弱。 4.结语 ​\t只要理解曝光三要素，任何效果你都能拍\n",
    
    "date": "2025-01-20 14:15:50",
    "updated": "2025-01-20 14:15:50"
  }
  
  , 
  {
    "objectID": "1735801173",
    "permalink": "/post/autoupdate-algolia-index_/",
    "title": "Github Actions + Hugo 自动更新 Algolia 索引",
    
    "content": "首先，注册一个Algolia账号，然后创建 Search一个 应用, 进入左下角的Data sources 依次点击Crawler→Domains绑定域名, 域名验证成功后可能创建一个Crawler, 不用管, 可以删掉它。\n在 hugo 项目的根目录下的 .github/workflows/updata.yaml文件中添加以下内容:\n- name: Upload algolia uses: iChochy/Algolia-Upload-Records@main env: APPLICATION_ID: ${{ secrets.ALGOLIA_APP_ID }} ADMIN_API_KEY: ${{ secrets.ALGOLIA_API_KEY }} INDEX_NAME: ${{ secrets.ALGOLIA_INDEX_NAME }} FILE_PATH: \u0026#34;./public/algolia.json\u0026#34; 来到 API Key 页面,\n复制 Application ID 作为 ALGOLIA_APP_ID。 复制 Write API Key 作为 ALGOLIA_API_KEY。 再来到 Search → CONFIGURE → index\n复制 index 下面的名字作为 ALGOLIA_INDEX_NAME。 在存放主文件的GitHub仓库的 Settings → Secrets and variables → Actions 中新建 Repository secrets ,填入以上几个 Secrets。\nPS:如果在账号的 Your plan and billing 中发现没有 CRAWLER 的额度，说明 Algolia 官方的设置出了问题。我的方法是重新注册账号，选择 Build 套餐。\n",
    
    "date": "2025-01-02 14:59:33",
    "updated": "2025-01-03 02:49:33"
  }
  
  , 
  {
    "objectID": "1735735417",
    "permalink": "/post/install-free-typora_/",
    "title": "Typora 免费安装教程",
    
    "content": " 文章目录 Typora 简介 安装教程 下载安装包与工具 安装与解压 复制文件至安装目录 以管理员身份运行 CMD 运行工具 输入序列号 错误处理 安装完成 Typora 简介 Typora 是一款跨平台的 Markdown 编辑器，因其简洁的界面和流畅的用户体验而受到广泛欢迎。它支持实时预览功能，让您在编辑 Markdown 文档的同时即时查看最终效果，无需切换视图。此外，Typora 还提供自动保存、多种导出格式（如 PDF、HTML、Word 等）、丰富的主题和样式选项，能够满足不同用户的需求。通过直观的操作界面和快捷键支持，您可以轻松进行文本编辑、格式调整和内容管理，极大提升写作、笔记记录和文档编写的效率。无论您是编程开发者、作家还是学生，Typora 都能为您带来出色的 Markdown 编辑体验。\n安装教程 下载安装包与工具 Typora 官网地址：https://typora.io Typora 中文官网地址：https://typoraio.cn\n工具下载地址：Typora工具包\n安装与解压 Typora 的安装过程我就不演示了，只需按提示点击“下一步”即可。接着，将下载的工具压缩包解压，您会看到两个 exe 文件。\n复制文件至安装目录 把解压出来的两个 exe 文件复制到 Typora 的安装目录下，默认路径为：C:\\Program Files\\Typora，如安装在其他路径，请自行替换。\n以管理员身份运行 CMD 点击 Windows 键或在系统搜索框搜索 CMD（即命令提示符），并以管理员身份运行。\n运行工具 点击 Windows 键或在系统搜索框搜索 CMD（即命令提示符），并以管理员身份运行。\n​\t（1）输入\ncd C:\\Program Files\\Typora 按回车，跳转到 Typora 安装路径。\n​\t（2）输入\nnode_inject.exe 按回车，等待提示“done!”。\n​\t（3）输入\nlicense-gen.exe 按回车，等待显示序列号。\n输入序列号\n启动 Typora，随意输入邮箱地址，并将生成的序列号粘贴到激活窗口中，点击按钮。\n错误处理\n稍等数秒后，若因网络原因出现错误提示，点击确认即可，无需担心。\n安装完成\n安装完成后请勿更新 Typora，否则可能失效。如果需要更新，请先彻底卸载旧版本，再重新安装新版本。\n",
    
    "date": "2025-01-01 20:43:37",
    "updated": "2025-01-02 00:12:37"
  }
  
  , 
  {
    "objectID": "1735731655",
    "permalink": "/post/write-a-article_/",
    "title": "怎么在hugo写一篇文章",
    
    "content": " 摘要 添加一篇文章 本地开启草稿箱视图 解除文章草稿状态 发布草稿文章 设置文章过期时间/发布时间 发布保留过期文章及未发布文章 添加一篇文章 添加文章使用的是 new 子命令，这里我们在 post目录下创建一篇名为 my-first-post\nhugo new posts/my-first-post.md 创建完成后打开文章可以看到如下内容：\n+++ title: ‘My First Post’ date: \u0026#39;2025-01-01T19:10:33+08:00\u0026#39; draft: true +++ 这是一篇 Markdown 格式的文章，文章的开头由前后 +++ 包裹了一些信息，这些信息称为文章的元数据，用于说明文章的相关配套信息，其中包括但不限于标题、日期、标签、是否草稿等。\n这里对上述的元数据做解释如下：\ntitle: 文章的标题 date: 文章的日期 draft: 文章是否草稿，草稿内容不会被发布 tags: 为当前文章打标签，不同文章可以使用相同的标签 文章内容需要写在元数据的后面：\n+++ title: ‘My First Post’ date: \u0026#39;2025-01-01T19:10:33+08:00\u0026#39; draft: true +++ hello，word！ 完成文章的编写后我们启动hugo来到浏览器，发现并没有看到新加的文章，即使刷新几百次也是一样的效果，这是因为文章仍处于草稿箱状态。\n如果我们想在本地查看草稿内容，只需要在启动 Hugo 的时候带上参数 -D或则 --buildDrafts ：\nhugo server -D 解除文章草稿状态 在正式发布文章前我们需要解除当前文章的草稿状态，解除草稿状态只需要把文章开头的 draft 选项去除即可。\n发布草稿文章 如果需要将草稿内容进行发布，在执行 hugo 生成发布内容时附带 -D 或则 --buildDrafts 即可。\nhugo -D 设置文章过期时间/发布时间 Hugo 通过以下两个元数据选项提供文章的过期时间及发布时间（已发布的可以通过 URL 间接访问😂）：\nexpiryDate：过期时间，已过期的内容不会渲染到网页中 publishDate：发布时间，未到发布时间不会渲染到网页中 +++ title: \u0026#34;你好\u0026#34; date: 2024-12-26T01:04:52+08:00 expiryDate: 2024-12-26T01:05:52+08:00 description: \u0026#34;我不好\u0026#34; +++ 发布保留过期文章及未发布文章 直接执行 hugo 生成的发布内容不会携带已过期的文章或者未到发布时间的文章.\n需要发布时携带过期文章需要执行时附带参数 -E 或则 --buildExpired：\nhugo -E 需要发布时携带未发布文章需要执行时附带参数 -F 或则 --buildFuture：\nhugo -F 当然也可以选择同时附带两个以上的参数：\nhugo -DEF 生成发布文件完成后push最新内容到 GitHub 上即可看到最新的文章。\n",
    
    "date": "2025-01-01 19:40:55",
    "updated": "2025-01-01 20:30:00"
  }
  
  , 
  {
    "objectID": "1735729833",
    "permalink": "/post/build-a-hugo-blog_/",
    "title": "用Github仓库免费部署自己的Hugo博客",
    
    "content": " 环境准备 Git下载 前往【Git官网】，下载安装程序\n一直点下一步，默认安装即可\nHugo下载 前往【Hugo Github Tags】，选择对应版本下载，下载后解压即可\nWindows下载版本：hugo_extended_xxxxx_windows_amd64.zip\n搭建博客 创建博客 （1）在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行 （2）敲打命令hugo new site xxxx创建hugo文件 （3）敲打命名cd xxxx切换目录，并把hugo.exe复制到刚生成的文件夹中 （4）敲打命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 （hugo默认是没有主题的，需要进行主题配置） 配置主题 （1）前往【Hugo Themes】，查找自己喜欢的主题，进行下载 （2）这边以【Reimu主题】为例，将下载好的主题解压，放到/themes文件夹中 （3）config 文件夹下创建 _default 文件夹，然后将主题内的 config/_default/params.yml 复制到 _default 文件夹下 （4）将主题内的 config/data/ 文件夹内的所有文件复制到外层 data 文件夹下，此文件夹内的文件用于配置主题内的数据： （5）在hugo目录下创建static 文件夹，然后将主题内的 static 文件夹下的文件复制到外层 static 文件夹下 （6）修改 hugo.toml 中的 theme，将他修改为跟主题文件夹同名 （7）再次启动hugo服务，查看主题。具体主题配置修改可以查看【Reimu】 Github部署 常规部署 （1）前往【Github官网】，创建仓库 {github用户名}.github.io\n（2）前往Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启 https://{github用户名}.github.io 的地址，这地址也是以后访问博客的地址\n（3）回到hugo文件中，执行命令hugo -D，会生成 public 静态资源文件夹\n（4）点击hugo中的 public 文件夹，在文件夹下执行以下命令上传到github仓库上，第一次上传可能需要输入账号密码\n1.git init 2.git add . 3.git commit -m \u0026#34;first commit\u0026#34; 4.git branch -M main 5.git remote add origin {你的github仓库地址} 6.git push -u origin main （5）上传成功后访问 https://{github用户名}.github.io，成功搭建属于自己的Hugo博客\nGithub Action自动部署 （1）Github创建一个新的仓库，用于存放Hugo的主文件\n（2）前往Setttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)\n（3）token选择永不过期，并勾选 repo 和 workflow 选项\n（4）为保证安全，将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置\n（5）在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档】\nname: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy （6）在hugo主文件创建.gitignore文件，来避免提交不必要的文件\n# 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe （7）将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面\ngit init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main ",
    
    "date": "2025-01-01 19:10:33",
    "updated": "2025-01-01 19:40:55"
  }
  
  , 
  {
    "objectID": "1735146292",
    "permalink": "/post/hello_/",
    "title": "博客的第一篇文章",
    
    "content": "大家好，我是Тенеход\n这是我新创建的博客，希望大家可以在这个评论区下多多留言\n后续，我会出一个搭建这个博客还有应用这个主题的教程。\n尽请期待吧 :ஐ٩(๑´ᵕ`)۶ஐ:\nps:后续也会有许多各种各样的教程\n",
    
    "date": "2024-12-26 01:04:52",
    "updated": "2024-12-26 01:05:20"
  }
  
]